import sqlite3

def connect_db():
    return sqlite3.connect('retail.db')

def menu():
    print("\n=== Retail System Menu ===")
    print("1. Add new customer")
    print("2. Add new order")
    print("3. View all orders")
    print("4. Update customer")
    print("5. Delete customer")
    print("6. Summary: Orders per customer")
    print("7. Exit")

def main():
    while True:
        menu()
        choice = input("Enter choice: ")

        if choice == "1":
            add_customer()
        elif choice == "2":
            add_order()
        elif choice == "3":
            view_orders()
        elif choice == "4":
            update_customer()
        elif choice == "5":
            delete_customer()
        elif choice == "6":
            orders_summary()
        elif choice == "7":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Try again.")

if __name__ == "__main__":
    main()

def add_customer():
    name = input("Enter name: ")
    email = input("Enter email: ")
    phone = input("Enter phone: ")
    address = input("Enter address: ")

    conn = connect_db()
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO Customers (name, email, phone, address) VALUES (?, ?, ?, ?)",
                       (name, email, phone, address))
        conn.commit()
        print("Customer added successfully.")
    except sqlite3.IntegrityError:
        print("Email already exists!")
    conn.close()

def add_customer():
    name = input("Enter name: ")
    email = input("Enter email: ")
    phone = input("Enter phone: ")
    address = input("Enter address: ")

    conn = connect_db()
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO Customers (name, email, phone, address) VALUES (?, ?, ?, ?)",
                       (name, email, phone, address))
        conn.commit()
        print("Customer added successfully.")
    except sqlite3.IntegrityError:
        print("Email already exists!")
    conn.close()

def add_order():
    customer_id = input("Enter customer ID: ")
    product = input("Enter product name: ")
    date = input("Enter order date (YYYY-MM-DD): ")
    quantity = int(input("Enter quantity: "))

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO Orders (customer_id, product_name, order_date, quantity) VALUES (?, ?, ?, ?)",
                   (customer_id, product, date, quantity))
    conn.commit()
    conn.close()
    print("Order added.")

def view_orders():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT Orders.order_id, Customers.name, Orders.product_name, Orders.order_date, Orders.quantity
        FROM Orders
        JOIN Customers ON Orders.customer_id = Customers.customer_id
        ORDER BY Orders.order_date DESC
    ''')
    rows = cursor.fetchall()
    print("\n--- All Orders ---")
    for row in rows:
        print(f"Order ID: {row[0]}, Customer: {row[1]}, Product: {row[2]}, Date: {row[3]}, Quantity: {row[4]}")
    conn.close()

def update_customer():
    customer_id = input("Enter customer ID to update: ")
    new_phone = input("Enter new phone: ")
    new_address = input("Enter new address: ")

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("UPDATE Customers SET phone = ?, address = ? WHERE customer_id = ?",
                   (new_phone, new_address, customer_id))
    conn.commit()
    conn.close()
    print("Customer updated.")

def delete_customer():
    customer_id = input("Enter customer ID to delete: ")

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM Customers WHERE customer_id = ?", (customer_id,))
    conn.commit()
    conn.close()
    print("Customer deleted.")
def orders_summary():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT Customers.name, COUNT(Orders.order_id) AS total_orders
        FROM Customers
        LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id
        GROUP BY Customers.customer_id
        ORDER BY total_orders DESC
    ''')
    rows = cursor.fetchall()
    print("\n--- Orders per Customer ---")
    for row in rows:
        print(f"{row[0]}: {row[1]} orders")
    conn.close()
